<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders | B2B Escrow Marketplace</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <%- contentFor('body') %>
    <div class="container py-5">
        <div class="row mb-4">
            <div class="col">
                <h2 class="text-primary">Seller Orders</h2>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="py-3">Order ID</th>
                                        <th class="py-3">Product</th>
                                        <th class="py-3">Buyer</th>
                                        <th class="py-3">Amount</th>
                                        <th class="py-3">Delivery Status</th>
                                        <th class="py-3">Payment Status</th>
                                        <th class="py-3">Escrow Status</th>
                                        <th class="py-3">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="ordersTableBody">
                                    <!-- Orders will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div class="modal fade" id="orderDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title">Order Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">Order Information</h6>
                                    <p class="mb-2"><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                                    <p class="mb-2"><strong>Date:</strong> <span id="modalOrderDate"></span></p>
                                    <p class="mb-2"><strong>Amount:</strong> <span id="modalOrderAmount"></span></p>
                                    <p class="mb-0"><strong>Quantity:</strong> <span id="modalQuantity"></span></p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">Status Information</h6>
                                    <p class="mb-2">
                                        <strong>Delivery Status:</strong> 
                                        <span id="modalDeliveryStatus" class="badge"></span>
                                    </p>
                                    <p class="mb-2">
                                        <strong>Payment Status:</strong> 
                                        <span id="modalPaymentStatus" class="badge"></span>
                                    </p>
                                    <p class="mb-0">
                                        <strong>Escrow Status:</strong> 
                                        <span id="modalEscrowStatus" class="badge"></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">Buyer Information</h6>
                                    <div id="modalBuyerDetails"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">Delivery Address</h6>
                                    <div id="modalDeliveryAddress"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <div id="modalActions" class="d-flex gap-2"></div>
                </div>
            </div>
        </div>
    </div>

    <style>
    /* Status Badge Styles */
    .badge {
        font-size: 0.85rem;
        padding: 0.5em 1em;
        font-weight: 500;
        letter-spacing: 0.3px;
        border-radius: 6px;
        min-width: 100px;
        text-align: center;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #000;
    }

    .badge-danger {
        background-color: #dc3545;
        color: white;
    }

    .badge-info {
        background-color: #17a2b8;
        color: white;
    }

    .badge-secondary {
        background-color: #6c757d;
        color: white;
    }

    /* Table Styles */
    .table {
        font-size: 0.95rem;
    }

    .table th {
        font-weight: 600;
        color: #495057;
        white-space: nowrap;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    /* Button Styles */
    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.875rem;
        border-radius: 4px;
    }

    .btn-info {
        color: white;
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    .btn-info:hover {
        color: white;
        background-color: #138496;
        border-color: #117a8b;
    }

    /* Card Styles */
    .card {
        border: none;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .card-body {
        padding: 1.5rem;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 8px;
    }

    .modal-header {
        border-bottom: 1px solid #dee2e6;
        padding: 1.25rem 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid #dee2e6;
        padding: 1.25rem 1.5rem;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 1.5rem;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 3rem;
        color: #adb5bd;
        margin-bottom: 1.5rem;
    }

    /* Error State */
    .error-message {
        text-align: center;
        padding: 3rem 1.5rem;
        color: #dc3545;
    }

    .error-message i {
        font-size: 3rem;
        margin-bottom: 1.5rem;
    }

    /* Loading State */
    .loading-state {
        text-align: center;
        padding: 3rem 1.5rem;
    }

    .loading-spinner {
        width: 3rem;
        height: 3rem;
        margin-bottom: 1.5rem;
    }
    </style>

    <script>
    document.addEventListener('DOMContentLoaded', loadOrders);

    async function loadOrders() {
        const ordersTableBody = document.getElementById('ordersTableBody');
        
        // Show loading state
        ordersTableBody.innerHTML = `
            <tr>
                <td colspan="8" class="loading-state">
                    <div class="spinner-border loading-spinner text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Loading orders...</p>
                </td>
            </tr>
        `;

        try {
            const response = await fetch('/api/orders/sellerorders', {
                credentials: 'include'
            });
            const result = await response.json();

            if (result.success) {
                ordersTableBody.innerHTML = '';

                if (result.data.length === 0) {
                    ordersTableBody.innerHTML = `
                        <tr>
                            <td colspan="8" class="empty-state">
                                <i class="fas fa-box"></i>
                                <h5>No Orders Yet</h5>
                                <p class="text-muted">When customers place orders, they'll appear here</p>
                            </td>
                        </tr>
                    `;
                    return;
                }

                result.data.forEach(order => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="fw-medium">${order.orderId || 'N/A'}</td>
                        <td>${order.productName || 'N/A'}</td>
                        <td>${order.buyer ? `${order.buyer.firstName} ${order.buyer.lastName}` : 'N/A'}</td>
                        <td class="fw-medium">₹${((order.amount || 0) / 100).toFixed(2)}</td>
                        <td>
                            <span class="badge badge-${getStatusBadgeClass(order.deliveryStatus)}">
                                ${formatStatus(order.deliveryStatus)}
                            </span>
                        </td>
                        <td>
                            <span class="badge badge-${getStatusBadgeClass(order.paymentStatus)}">
                                ${formatStatus(order.paymentStatus)}
                            </span>
                        </td>
                        <td>
                            <span class="badge badge-${getStatusBadgeClass(order.escrowStatus)}">
                                ${formatStatus(order.escrowStatus)}
                            </span>
                        </td>
                        <td>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-info" onclick="viewOrderDetails('${order._id}')">
                                    <i class="fas fa-eye me-1"></i> View
                                </button>
                                ${order.deliveryStatus === 'not_shipped' ? 
                                    `<button class="btn btn-sm btn-primary" onclick="updateDeliveryStatus('${order._id}', 'shipped')">
                                        <i class="fas fa-truck me-1"></i> Ship
                                    </button>` : 
                                    ''}
                                ${order.deliveryStatus === 'shipped' ? 
                                    `<button class="btn btn-sm btn-success" onclick="updateDeliveryStatus('${order._id}', 'delivered')">
                                        <i class="fas fa-check me-1"></i> Delivered
                                    </button>` : 
                                    ''}
                            </div>
                        </td>
                    `;
                    ordersTableBody.appendChild(row);
                });
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Error loading orders:', error);
            ordersTableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="error-message">
                        <i class="fas fa-exclamation-circle"></i>
                        <h5>Failed to Load Orders</h5>
                        <p>Please try refreshing the page</p>
                    </td>
                </tr>
            `;
        }
    }

    async function viewOrderDetails(orderId) {
        try {
            // Show loading state
            const loadingModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            document.getElementById('modalOrderId').textContent = 'Loading...';
            loadingModal.show();

            const response = await fetch(`/api/orders/${orderId}`, {
                credentials: 'include',
                headers: {
                    'Accept': 'application/json'
                }
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to load order details');
            }

            if (result.success) {
                const order = result.data;
                
                // Update modal content
                document.getElementById('modalOrderId').textContent = order.orderId || 'N/A';
                document.getElementById('modalOrderDate').textContent = order.createdAt ? new Date(order.createdAt).toLocaleString() : 'N/A';
                document.getElementById('modalOrderAmount').textContent = order.amount ? `₹${(order.amount / 100).toFixed(2)}` : 'N/A';
                document.getElementById('modalQuantity').textContent = order.quantity || 'N/A';

                // Update status badges
                const deliveryStatus = document.getElementById('modalDeliveryStatus');
                deliveryStatus.textContent = formatStatus(order.deliveryStatus);
                deliveryStatus.className = `badge badge-${getStatusBadgeClass(order.deliveryStatus)}`;

                const paymentStatus = document.getElementById('modalPaymentStatus');
                paymentStatus.textContent = formatStatus(order.paymentStatus);
                paymentStatus.className = `badge badge-${getStatusBadgeClass(order.paymentStatus)}`;

                const escrowStatus = document.getElementById('modalEscrowStatus');
                escrowStatus.textContent = formatStatus(order.escrowStatus);
                escrowStatus.className = `badge badge-${getStatusBadgeClass(order.escrowStatus)}`;

                // Update buyer details
                const buyer = order.buyerId || {};
                document.getElementById('modalBuyerDetails').innerHTML = `
                    <p class="mb-2"><strong>Name:</strong> ${buyer.firstName && buyer.lastName ? `${buyer.firstName} ${buyer.lastName}` : 'N/A'}</p>
                    <p class="mb-0"><strong>Email:</strong> ${buyer.email || 'N/A'}</p>
                `;

                // Update delivery address
                const address = order.deliveryAddress || {};
                document.getElementById('modalDeliveryAddress').innerHTML = `
                    <div class="mb-3">
                        <p class="mb-2"><strong>Name:</strong> ${address.name || 'N/A'}</p>
                        <p class="mb-2"><strong>Phone:</strong> ${address.phone || 'N/A'}</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-2"><strong>Address:</strong> ${address.address || 'N/A'}</p>
                        <p class="mb-2"><strong>State:</strong> ${address.state || 'N/A'}</p>
                        <p class="mb-2"><strong>Pincode:</strong> ${address.pincode || 'N/A'}</p>
                        <p class="mb-0"><strong>Country:</strong> ${address.country || 'N/A'}</p>
                    </div>
                `;

                // Update action buttons
                const actionsDiv = document.getElementById('modalActions');
                actionsDiv.innerHTML = '';

                if (order.deliveryStatus === 'not_shipped') {
                    actionsDiv.innerHTML += `
                        <button class="btn btn-primary" onclick="updateDeliveryStatus('${order._id}', 'shipped')">
                            <i class="fas fa-truck me-1"></i> Mark as Shipped
                        </button>
                    `;
                } else if (order.deliveryStatus === 'shipped') {
                    actionsDiv.innerHTML += `
                        <button class="btn btn-success" onclick="updateDeliveryStatus('${order._id}', 'delivered')">
                            <i class="fas fa-check me-1"></i> Mark as Delivered
                        </button>
                    `;
                }
            } else {
                throw new Error(result.message || 'Failed to load order details');
            }
        } catch (error) {
            console.error('Error:', error);
            // Hide the loading modal
            const modalElement = document.getElementById('orderDetailsModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
            
            // Show error alert
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3';
            alertDiv.style.zIndex = '1050';
            alertDiv.innerHTML = `
                <strong>Error!</strong> ${error.message || 'Failed to load order details. Please try again later.'}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.appendChild(alertDiv);
            
            // Remove the alert after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    }

    async function updateDeliveryStatus(orderId, status) {
        try {
            const response = await fetch(`/api/orders/${orderId}/delivery-status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({ status })
            });

            const result = await response.json();

            if (result.success) {
                alert(`Order marked as ${formatStatus(status)} successfully!`);
                $('#orderDetailsModal').modal('hide');
                loadOrders(); // Reload the orders list
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Error updating delivery status:', error);
            alert('Failed to update delivery status. Please try again later.');
        }
    }

    function formatStatus(status) {
        if (!status) return 'N/A';
        return status.split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
    }

    function getStatusBadgeClass(status) {
        if (!status) return 'secondary';
        
        switch(status.toLowerCase()) {
            case 'pending':
            case 'not_shipped':
                return 'warning';
            case 'success':
            case 'delivered':
            case 'completed':
            case 'released':
                return 'success';
            case 'shipped':
            case 'locked':
                return 'info';
            case 'failed':
            case 'disputed':
            case 'refunded':
                return 'danger';
            default:
                return 'secondary';
        }
    }
    </script>
</body>
</html> 